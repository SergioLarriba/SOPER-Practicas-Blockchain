/*
int miningSystem(int target_ini, int rounds, int n_threads) {
    pthread_t *h = NULL;
    int i, j, error;
    int *ids = NULL;
    void *result = NULL;
    pid_t pid;
    char buff_char[BUFF_SIZE];
    int status = EXIT_SUCCESS;
    
    //Compruebo argumentos
    if ((target_ini < 0) || (target_ini >= POW_LIMIT) || (rounds < 0) || (n_threads <= 0))
    {
        fprintf(stderr, "Error in miningSystem args\n");
        return EXIT_FAILURE;
    }
     
    n_threads_global = n_threads;
    //Reservo memoria para el array de ids hilos
    ids = (int*) malloc(sizeof(int) * n_threads);
    if (ids == NULL) {
        return EXIT_FAILURE;
    }
    for (i=0; i<n_threads; i++) {
        ids[i] = i;
    }

    //Reservo memoria para el array de hilos
    h = (pthread_t*) malloc(n_threads * sizeof(h[0])); 
    if (h == NULL) {
        fprintf(stderr, "ERROR when creating the array of threads\n"); 
        free(ids);
        return EXIT_FAILURE;
    }

    //Separo el espacio de busqueda
    work_per_thread = POW_LIMIT / n_threads;

    target = target_ini;

    //Creo los hilos y los pongo a buscar 
    for (j=0; j<rounds; j++) {
        for (i=0; i<n_threads; i++) {
            error = pthread_create(&h[i], NULL, miner, &ids[i]); 
            if (error != 0) {
                fprintf(stderr, "pthread_create: ERROR\n");
                free(ids);
                free(h);
                return EXIT_FAILURE;
            }   
        } 

        //Cierro los hilos y envio los resultados correspondientes 
        for (i=0; i<n_threads; i++) {
            error = pthread_join(h[i], &result);
            if (result != NULL) {
                /* TODO: Enviar resultado a Monitor 
            }
            if (error != 0) {
                fprintf(stderr, "pthread_join: ERROR\n");
                free(ids);
                free(h);
                return(EXIT_FAILURE);
            }
        }
        message.objetivo = target; 
        message.solucion = thread_result; 
        target = next_target;
    }


}

void *miner(void *arg) { 
    int i;
    int id = *((int*)arg);
    int end = (id+1) * work_per_thread;
    
    if (id == (n_threads_global-1)) {
        end = POW_LIMIT+1;
    }

    for (i=id * work_per_thread; i < end; i++) {
        if (pow_hash(i)==target) { 
            next_target = i;
            thread_result = i;
            pthread_exit(&thread_result); 
        }
    }

    pthread_exit(NULL);
}*/
